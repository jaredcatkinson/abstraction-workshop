[
{
	"uri": "/abstraction-workshop/labs/eng_api_monitor/",
	"title": "Engineer a Detection - API Monitor",
	"tags": [],
	"description": "",
	"content": " Description We want to determine what API(s) are called when creating a service. To do this, we can dynamically analyze a process of choice and see what API(s) it calls to perform its action. In this lab we will walk through how to utilize a tool called \u0026ldquo;API Monitor\u0026rdquo; to see which API(s) are called when we use powershell.exe to create a service.\nGoals By the end of this lab, you should be able to  Understand how to use API Monitor Understand how to perform dynamic analysis with API Monitor  If this is not the case, please ask for help!\n\rRequirements  Access to the Windows 10 student system API Monitor  \r\rLab files\r\rNone\n\r\rSteps Step 1: Install API Monitor  Click on the Windows Start Menu\n In the search bar, type \u0026ldquo;powershell\u0026rdquo;\n Right click on \u0026ldquo;Windows PowerShell\u0026rdquo; and select \u0026ldquo;Run as Administrator\u0026rdquo;\n   Input: Invoke-WebRequest \u0026quot;http://www.rohitab.com/download/api-monitor-v2r13-setup-x64.exe\u0026quot; -OutFile \u0026quot;C:\\tools\\api-monitor.exe\u0026quot;  This will invoke a webrequest to download the API Monitor Setup executable and set the path as \u0026ldquo;C:\\tools\\api-monitor.exe\u0026rdquo;\n Run the setup script by running: C:\\tools\\api-monitor.exe in powershell.\n Walk through the installation steps.\n  Step 2: Use API Monitor for Dynamic Analysis  Go to the Start Menu, and search for API Monitor (64) and open it\n When prompted, press \u0026ldquo;Ok\u0026rdquo;\n   Input the API(s) you want to monitor. For this exercise we will monitor API(s) that correlate directly to Services. To look for these API(s) go to \u0026ldquo;API Filter\u0026rdquo;, expand \u0026ldquo;System Services\u0026rdquo;, and check the \u0026ldquo;Services\u0026rdquo; box.   Expand \u0026ldquo;Services\u0026rdquo; and take note of the API(s) being monitored for.\n Get the Process ID of your powershell process by inputting: $PID\n   Under \u0026ldquo;Running Processes\u0026rdquo; find your PID, then right click and press \u0026ldquo;Start Monitoring\u0026rdquo;  Note: Under \u0026ldquo;Monitoring Processes\u0026rdquo; you should now see that your powershell process is being monitored.\n In your powershell window, input: New-Service -Name abstraction -BinaryPathName C:\\Windows\\notepad.exe -DisplayName abstraction -StartupType Automatic\n Go to API Monitor and look under \u0026ldquo;Summary\u0026rdquo; to see the API(s) called\n  Questions  What API(s) were called when creating a service? Did any API(s) fire you did not expect to see?  "
},
{
	"uri": "/abstraction-workshop/labs/eng_rpc_etw/",
	"title": "Engineer a Detection - Logman ETW",
	"tags": [],
	"description": "",
	"content": " Goals  Understand Event Tracing for Windows. Identify Running Traces Sessions and query ETW Providers. Use Powershell and Logman to generate and events for consumption.  Scenario\nIn a previous lab we discovered that New-Service leverages RPC as part of the service creation routine. Until now we have relied on Microsoft\u0026rsquo;s Service Control Manager Remote Protocol documentation to make inferences about the implementation details for New-Service\u0026rsquo;s RPC interactions. Inferences are a good start, but we generally like to confirm these details through dynamic or static analysis. As a lead in to this lab, we introduced the idea of Event Tracing for Windows or ETW. This is a logging feature that is available by default on all modern versions of Windows which provides a mechanism for monitoring numerous aspects of the operating system. You are likely very familiar with at least one technology that is the result of ETW, the Windows Security Event Log. The cool thing is that ETW already feeds the Windows Security Event Log, but it also has numerous other events that remain dormant until specifically asked for.\nThis lab will take you on a tour of one way to explore ETW natively, explain ETW concepts as they become relevant, and show how you can enable targetted logging for testing and validation all within the context of sc.exe and PowerShell\u0026rsquo;s New-Service.\nRequirements  Windows 10 VM  Steps Step 1: Query ETW sessions and providers with \u0026ldquo;logman\u0026rdquo;  Click on the Windows Start Menu\n In the search bar, type \u0026ldquo;powershell\u0026rdquo;\n Right click on \u0026ldquo;Windows PowerShell\u0026rdquo; and select \u0026ldquo;Run as Administrator\u0026rdquo;\n  To start, we want to take a look at all of the running trace sessions:\nNote: Event tracing sessions record events from ETW Providers. These sessions are enabled by a controller, that is an application in charge of enabling/disabling providers, specifying the log file the tracing sessions are written to, and starting/stopping the event tracing sessions. Controllers can also update and query tracing sessions.\nlogman query -ets  Notice that there are already a few trace sessions running on the system by default. As mentioned earlier in the lab, the trace session where the \u0026ldquo;Data Collector Set\u0026rdquo; is set to EventLog-System is the trace session that is collecting on behalf of the Windows System Event Log.\nLet\u0026rsquo;s take a look to see the specific provider that the EventLog-System trace is subscribed to:\nNote: Event Providers are similar to subjects in ETW logging. They are applications that contain the type of events you would like to create tracing sessions for. For example - the Microsoft-Windows-RPC provider will log events that correlate with different RPC activity.\nlogman query \u0026quot;EventLog-System\u0026quot; -ets  Make note of the File-Mode field at the top of the output and Name \u0026amp; Provider GUID fields for each subsection.\nNow let\u0026rsquo;s take a look at all of the providers availible:\nlogman query providers  Because we want to filter on all of the possible providers, let\u0026rsquo;s store the providers into a variable with this command:\n$ETW = logman query providers  Note: This command can take a long time to finish.\nTo view all of the providers related to RPC run the following command:\n$ETW | Where-Object { $_ -Like “*RPC*”}  Step 2: Execute a new service creation and collect the data using logman Note: For this next step, we want to open up a second powershell. We will refer to this as Powershell #2 for the rest of this lab and the first powershell window as Powershell #1.\n Click on the Windows Start Menu\n In the search bar, type \u0026ldquo;powershell\u0026rdquo;\n Right click on \u0026ldquo;Powershell\u0026rdquo; and select \u0026ldquo;Run as Administrator\u0026rdquo;.\n In Powershell #1 start an event tracing session by typing:\nlogman start RPCTrace -p Microsoft-Windows-RPC 0xffffffffffffffff win:Informational -ets   Breaking down the above command:\nlogman start RPCTrace is going to start an event tracing session with the name \u0026ldquo;RPCTrace\u0026rdquo;.\n-p Microsoft-Windows-RPC will specify the provider \u0026ldquo;Microsoft-Windows-RPC\u0026rdquo;.\n0xffffffffffffffff is specifying to capture all RPC Keywords. Keywords are used to classify different types of events.\nwin:Informational is specifying we want to collect informational events.\n-ets sends the commands to the Event Tracing Session directly versus saving or scheduling.\n\r In Powershell #2 create a new service by typing the following command:\nNew-Service -Name \u0026quot;Test_Service\u0026quot; -BinaryPathName C:\\Windows\\System32\\calc.exe  In Powershell #1 stop the tracing session\nlogman stop RPCTrace -ets   Step 3: Change the ETL file to EVTX and import into the Event Log  In Powershell #1 output the ETL file to EVTX\ntracerpt RPCTrace.etl -o RPCTrace.evtx -of EVTX  In the Start Menu type \u0026ldquo;Event Viewer\u0026rdquo;\n Click on \u0026ldquo;Event Viewer\u0026rdquo;\n In the top left under \u0026ldquo;Action\u0026rdquo; click on \u0026ldquo;Open Saved Log\u0026hellip;\u0026rdquo;\n   Go to the path you saved the RPCTrace.evtx file and open it.  Note: If you didn\u0026rsquo;t change your path when you opened up powershell the path will be - C:\\Windows\\System32\\RPCTrace.evtx.\n Click \u0026ldquo;Ok\u0026rdquo;  Note: RPCTrace will now be under Saved Logs within the Event Viewer.\nStep 4: Analyze the RPC logs  In the Event Viewer on the right, click on \u0026ldquo;Find\u0026hellip;\u0026rdquo; Type in this UUID: 367ABB81-9844-35F1-AD32-98F038001003 and press \u0026ldquo;Find Next\u0026rdquo;.  Note: The two RPC UUID\u0026rsquo;s that correlate with Service Creation are: 367ABB81-9844-35F1-AD32-98F038001003 and 338CD001-2244-31F1-AAAA-900038001003. Read more about the Service Control Manager Remote Protocol.\nConclusion: This lab was meant to provide a better insight into ETW events and how they can be used to look for RPC events within a host. Unforunately right now, there is no way to provde ETW level context at scale within an organization. However, there are other ways we can capture this type of information. Zeek logs over the network is one, they have a DCE_RPC log that will show when RPC is performed over the network.\n"
},
{
	"uri": "/abstraction-workshop/labs/eng_procmon/",
	"title": "Engineer a Detection - Procmon",
	"tags": [],
	"description": "",
	"content": " Description Now that we have selected New Service as our technique, and used the detection guidance within MITRE ATT\u0026amp;CK to research common utilities. We have chosen to focus on PowerShell\u0026rsquo;s New-Service cmdlet as one of the most common methods to install services. In this next step, we will monitor SC.EXE with Procmon to dynamically analyze how it creates a service, and continue filling out the abstraction map.\nReview previous labs for process similarities in order to accomplish the main objective(s)\n\rGoals By the end of this lab, you should be able to  Understand how to use Procmon Understand how to perform dynamic analysis with Procmon  If this is not the case, please ask for help!\n\rRequirements  Access to the Windows 10 student system Sysinterals Procmon  \r\rLab files\r\rNone\n\r\rSteps 1. Open Procmon:  Open File Explorer and navigate to C:\\tools\\SysinteralsSuite   Right click on Procmon64.exe and click \u0026ldquo;Run as administrator\u0026rdquo; Click on \u0026ldquo;Agree\u0026rdquo; on the License Agreement  Procmon should be open and ready to use:\n2. Set up Procmon for dynamic analysis Now that we have an example of a common method to install a service, we are going to use Procmon to dynamically analyze what happens when the New-Service powershell cmdlet creates a service.\nFollow the steps below to set Procmon up:\n With Procmon open, click on Filter   Click on Filter again   In the Filter popup, enter the following values as: Process Name is powershell.exe. See screenshot for reference. Once these values are added, click Add   Once the filter appears in the list, click Apply  Procmon is now configured to show us events for only powershell.exe activity on our system\n2. Run example using Procmon Now that Procmon is configured, we need to install a service using powershell.exe\nTo do this:\n Open an Administrative PowerShell window Run the following command:  New-Service -Name LabService -BinaryPathName C:\\Windows\\System32\\notepad.exe\nIf the command completed successfully, you will see\n3. Analyze results Now that our service has been created, we need to see what clues are contained in the Procmon data.\nWe can see in Procmon that there is an amount of activity, but reading through, we see no evidence of interaction with HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services. Why is this?\nWe know that the Service Control Manager database is stored in the registry. Is powershell.exe the process creating the service? No. However, we don\u0026rsquo;t know which process is so lets do some more analysis to find out.\n4. Change Capture Filter  With Procmon open, click on Filter   Click on Filter again\n In the Filter popup, enter the following values as: Path begins with HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\. Then click Add\n   We want to remove powershell.exe from the capture list, to do this uncheck its box on the left of its column within the filter listing. Your filter should now look like this:   Once the filter is removed click Apply\n Go back over to Procmon and perform analysis\n  Questions:  What is the process name that created the service? Why is this process used? Does it relate to RPC? If so - how? How is powershell calling this process to create this service? What is the full path name of the registry key?  "
},
{
	"uri": "/abstraction-workshop/labs/",
	"title": "Labs",
	"tags": [],
	"description": "",
	"content": "\r\rEngineer a Detection - API Monitor\r\r\rEngineer a Detection - Logman ETW\r\r\rEngineer a Detection - Procmon\r\r\r"
},
{
	"uri": "/abstraction-workshop/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "  "
},
{
	"uri": "/abstraction-workshop/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/abstraction-workshop/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]